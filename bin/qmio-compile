#!/usr/bin/env python3
r"""
         ___   __  __  ___   ___    _
        / _ \ |  \/  ||_ _| /   \  \ \
       | | | || |\/| | | | | | | |  \ \
       | |_| || |  | | | | | |_| |  / /
        \__\_\|_|  |_||___| \___/  /_/

qmio-compile allows to compile a QASM circuits into a instructions file.

It takes care of submitting the job to the required backend.

Examples:

    qmio-compile circuit.qasm
    qmio-compile --backend simulator_rtcs circuit.qasm
    qmio-compile --shots 200 circuit.qasm
    qmio-compile -o circuit.p circuit.qasm
"""

import qmio
import argparse


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        usage=__doc__,
        description="Qmio compilation helper",
        formatter_class=argparse.RawTextHelpFormatter,
    )
    parser.add_argument("qasm_file", help="Circuit QASM file")
    parser.add_argument("-s", "--shots", default=100, help="Number of shots")
    parser.add_argument(
        "-b", "--backend", default="simulator_rtcs",
        choices=["simulator_rtcs", "qpu_felisa",
                 "simulator_qulacs", "simulator_aer"],
        help="Backend to use"
    )
    parser.add_argument(
        "-o", "--output",
        default="instructions.p",
        help="Output file name for the instructions file"
    )
    args = parser.parse_args()

    qmio.compile(args.qasm_file, backend=args.backend,
                 output_filename=args.output, shots=args.shots)
