#!/usr/bin/env python3
r"""
         ___   __  __  ___   ___    _
        / _ \ |  \/  ||_ _| /   \  \ \
       | | | || |\/| | | | | | | |  \ \
       | |_| || |  | | | | | |_| |  / /
        \__\_\|_|  |_||___| \___/  /_/

qmio-run allows to execute QASM circuits in different backends:
    - felisa_qpu
    - rtcs_simulator
    - qulacs_simulator

It takes care of submitting the jobs to slurm and retrieving the results.

Examples:

    qmio-run circuit.qasm
    qmio-run --shots 200 circuit.qasm
    qmio-run instructions.p
"""

import qmio
import argparse


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        usage=__doc__,
        description="Qmio execution helper",
        formatter_class=argparse.RawTextHelpFormatter,
    )
    parser.add_argument("qasm_file", help="QASM or instructions file path")
    parser.add_argument("-s", "--shots", default=100, help="Number of shots")
    parser.add_argument(
        "-b", "--backend", default="simulator_rtcs",
        choices=["simulator_rtcs", "qpu_felisa",
                 "simulator_qulacs", "simulator_aer"],
        help="Backend to use"
    )
    parser.add_argument(
        "-r", "--results",
        default="results.json",
        help="Results file"
    )
    parser.add_argument(
        "-m", "--metrics",
        default="execution_metrics.json",
        help="Execution metrics file"
    )
    parser.add_argument("-d", "--direct", action='store_true',
                        help="Run directly without pre-compilation")
    args = parser.parse_args()

    qmio.run(args.qasm_file, backend=args.backend, results=args.results,
             execution_metrics=args.metrics, shots=args.shots,
             direct=args.direct)
